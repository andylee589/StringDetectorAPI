using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Reflection;
using System.Web;
using System.Web.Http;
using Autofac;
using Autofac.Integration.WebApi;
using StringDetector.Domain.Entities;
using StringDetector.Domain.Services;
using StringDetector.API.Connector;
//using PingYourPackage.Domain.Services;
namespace StringDetector.API.Config
{
  public  class AutofacWebAPI
    {
        public static void Initialize(HttpConfiguration config)
        {

            Initialize(config,
                RegisterServices(new ContainerBuilder()));
        }

        public static void Initialize(HttpConfiguration config, IContainer container)
        {

            config.DependencyResolver =
                new AutofacWebApiDependencyResolver(container);
        }

        private static IContainer RegisterServices(ContainerBuilder builder)
        {

            builder.RegisterApiControllers(Assembly.GetExecutingAssembly());

            //// EF DbContext
            builder.RegisterType<EntitiesContext>()
                   .As<DbContext>()
                   .InstancePerApiRequest();

            //// Register repositories by using Autofac's OpenGenerics feature
            //// More info: http://code.google.com/p/autofac/wiki/OpenGenerics
            builder.RegisterGeneric(typeof(EntityRepository<>))
                   .As(typeof(IEntityRepository<>))
                   .InstancePerApiRequest();

            //// Services
            builder.RegisterType<JobService>()
                .As<IJobService>()
                .InstancePerApiRequest();

            builder.RegisterType<JobStateService>()
                .As<IJobStateService>()
                .InstancePerApiRequest();
            builder.RegisterType<AutoGeneratedKeyService>()
                .As<IAutoGenerateKeyService>()
                .InstancePerApiRequest();
            // connector  and client
            builder.RegisterType<StringDetectorConnector>()
                .As<IConnector>()
                .InstancePerApiRequest();

            return builder.Build();
        }
    }
}
